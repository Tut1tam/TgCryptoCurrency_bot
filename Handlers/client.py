from aiogram import types, Dispatcher
from aiogram.types import ParseMode
from create_bot import dp, bot
from Keyboards import kb_client
import requests


@dp.message_handler(commands=['start'])
async def command_start(message: types.message):
    await bot.send_message(message.from_user.id, f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.username}! \n–Ø <b>CurrencyBot'
                                                 f'</b>, –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –≤–∞–º –ø—Ä–æ –Ω–æ–≤–æ—Å—Ç–∏, –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –º–Ω–æ–≥–æ–µ '
                                                 f'–¥—Ä—É–≥–æ–µ.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help',
                           parse_mode=ParseMode.HTML, reply_markup=kb_client)


@dp.message_handler(commands=['help'])
async def actual_weather(message: types.Message):
    await message.answer('–ë–æ—Ç —É–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/–ù–æ–≤–æ—Å—Ç–∏ /–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä /–í–∞–ª—é—Ç–∞ /–¶–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏ /–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ '
                         '/–ú–µ—Ç–∞–ª–ª—ã')


@dp.message_handler(commands=['–ù–æ–≤–æ—Å—Ç–∏'])
async def actual_news(message: types.Message):
    await message.answer('–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!')


@dp.message_handler(commands=['–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä'])
async def actual_news(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É, –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—É–º–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ '
                         '–∑–∞–ø—è—Ç—É—é(–ü—Ä–∏–º–µ—Ä: USD, RUB, 1000)')
    text = message.text
    print(text)
    val1, val2, count = text.split(',')
    if val1 and val2 != 'USD' or 'EUR':
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –≤–∞–ª—é—Ç—É', val1, val2, count)
    else:
        data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
        cur = data['Valute'][f'{val1}']['Value']
        cur2 = data['Valute'][f'{val2}']['Value']
        await message.answer(f'{count} {val1} -> {cur / cur2 * count} {val2}', val1, val2, count)


@dp.message_handler(commands=['–í–∞–ª—é—Ç–∞'])
async def actual_news(message: types.Message):
    data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
    usd = data['Valute']['USD']['Value']
    eur = data['Valute']['EUR']['Value']
    await message.answer(f'USD = {usd}‚ÇΩ\nEUR = {eur}‚ÇΩ')


@dp.message_handler(commands=['–¶–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏'])
async def actual_news(message: types.Message):
    await message.answer('–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!')


@dp.message_handler(commands=['–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'])
async def actual_news(message: types.Message):
    await message.answer('–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!')


@dp.message_handler(commands=['–ú–µ—Ç–∞–ª–ª—ã'])
async def actual_news(message: types.Message):
    await message.answer('–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!')


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start'])
    dp.register_message_handler(command_start, commands=['help'])
    dp.register_message_handler(command_start, commands=['–ù–æ–≤–æ—Å—Ç–∏'])
    dp.register_message_handler(command_start, commands=['–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä'])
    dp.register_message_handler(command_start, commands=['–í–∞–ª—é—Ç–∞'])
    dp.register_message_handler(command_start, commands=['–¶–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏'])
    dp.register_message_handler(command_start, commands=['–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'])
    dp.register_message_handler(command_start, commands=['–ú–µ—Ç–∞–ª–ª—ã'])
